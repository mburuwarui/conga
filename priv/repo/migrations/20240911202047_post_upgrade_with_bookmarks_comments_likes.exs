defmodule Conga.Repo.Migrations.PostUpgradeWithBookmarksCommentsLikes do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    rename table(:posts), :user_id, to: :author_id

    drop constraint(:posts, "posts_user_id_fkey")

    alter table(:posts) do
      add :title, :text, null: false
      add :category, :text, null: false
      add :reading_time, :bigint, default: 0
      add :visibility, :text, default: "public"

      modify :author_id,
             references(:users,
               column: :id,
               name: "posts_author_id_fkey",
               type: :uuid,
               prefix: "public"
             ),
             null: false
    end

    create table(:likes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "likes_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "likes_post_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :comment_id, :uuid
    end

    create table(:comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:likes) do
      modify :comment_id,
             references(:comments,
               column: :id,
               name: "likes_comment_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:comments) do
      add :content, :text, null: false
      add :is_approved, :boolean, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :post_id,
          references(:posts,
            column: :id,
            name: "comments_post_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :author_id,
          references(:users,
            column: :id,
            name: "comments_author_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:bookmarks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :notes, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "bookmarks_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "bookmarks_post_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    execute("ALTER TABLE posts alter CONSTRAINT posts_author_id_fkey NOT DEFERRABLE")
  end

  def down do
    drop constraint(:bookmarks, "bookmarks_user_id_fkey")

    drop constraint(:bookmarks, "bookmarks_post_id_fkey")

    drop table(:bookmarks)

    drop constraint(:comments, "comments_post_id_fkey")

    drop constraint(:comments, "comments_author_id_fkey")

    alter table(:comments) do
      remove :author_id
      remove :post_id
      remove :updated_at
      remove :inserted_at
      remove :is_approved
      remove :content
    end

    drop constraint(:likes, "likes_comment_id_fkey")

    alter table(:likes) do
      modify :comment_id, :uuid
    end

    drop table(:comments)

    drop constraint(:likes, "likes_user_id_fkey")

    drop constraint(:likes, "likes_post_id_fkey")

    drop table(:likes)

    drop constraint(:posts, "posts_author_id_fkey")

    alter table(:posts) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "posts_user_id_fkey",
               type: :uuid,
               prefix: "public"
             ),
             null: true

      remove :visibility
      remove :reading_time
      remove :category
      remove :title
    end

    rename table(:posts), :author_id, to: :user_id
  end
end
