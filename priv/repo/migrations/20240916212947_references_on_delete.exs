defmodule Conga.Repo.Migrations.ReferencesOnDelete do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint(:likes, "likes_comment_id_fkey")

    drop constraint(:likes, "likes_post_id_fkey")

    drop constraint(:likes, "likes_user_id_fkey")

    alter table(:likes) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "likes_user_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop constraint(:comments, "comments_user_id_fkey")

    drop constraint(:comments, "comments_post_id_fkey")

    alter table(:comments) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "comments_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute("ALTER TABLE comments alter CONSTRAINT comments_post_id_fkey NOT DEFERRABLE")

    alter table(:comments) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "comments_user_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute("ALTER TABLE comments alter CONSTRAINT comments_user_id_fkey NOT DEFERRABLE")

    execute("ALTER TABLE likes alter CONSTRAINT likes_user_id_fkey NOT DEFERRABLE")

    alter table(:likes) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "likes_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute("ALTER TABLE likes alter CONSTRAINT likes_post_id_fkey NOT DEFERRABLE")

    alter table(:likes) do
      modify :comment_id,
             references(:comments,
               column: :id,
               name: "likes_comment_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute("ALTER TABLE likes alter CONSTRAINT likes_comment_id_fkey NOT DEFERRABLE")
  end

  def down do
    drop constraint(:likes, "likes_comment_id_fkey")

    alter table(:likes) do
      modify :comment_id,
             references(:comments,
               column: :id,
               name: "likes_comment_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:likes, "likes_post_id_fkey")

    alter table(:likes) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "likes_post_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:comments, "comments_user_id_fkey")

    alter table(:comments) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "comments_user_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:comments, "comments_post_id_fkey")

    alter table(:comments) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "comments_post_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:likes, "likes_user_id_fkey")

    alter table(:likes) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "likes_user_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end
  end
end
