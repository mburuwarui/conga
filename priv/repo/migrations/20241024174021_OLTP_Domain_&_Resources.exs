defmodule :"Elixir.Conga.Repo.Migrations.OLTP_Domain_&_Resources" do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :role, :text, default: "user"
    end

    create table(:transfers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :amount, :bigint, null: false
      add :flags, :bigint, default: 0
      add :pending_id, :uuid

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :debit_account_id, :uuid, null: false
      add :credit_account_id, :uuid, null: false
      add :transfer_type_code, :bigint, null: false
    end

    create table(:transfer_types, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :code, :bigint, null: false
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:transfer_types, [:code], name: "transfer_types_unique_code_index")

    create table(:ledgers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :ledger_type_code, :bigint, null: false
    end

    create table(:ledger_types, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :code, :bigint, null: false
      add :name, :text, null: false
      add :asset_scale, :bigint, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:ledger_types, [:code], name: "ledger_types_unique_code_index")

    alter table(:ledgers) do
      modify :ledger_type_code,
             references(:ledger_types,
               column: :code,
               name: "ledgers_ledger_type_code_fkey",
               type: :bigint,
               prefix: "public",
               on_delete: :restrict
             )
    end

    create table(:accounts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:transfers) do
      modify :debit_account_id,
             references(:accounts,
               column: :id,
               name: "transfers_debit_account_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :restrict
             )

      modify :credit_account_id,
             references(:accounts,
               column: :id,
               name: "transfers_credit_account_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :restrict
             )

      modify :transfer_type_code,
             references(:transfer_types,
               column: :code,
               name: "transfers_transfer_type_code_fkey",
               type: :bigint,
               prefix: "public"
             )
    end

    alter table(:accounts) do
      add :balance, :bigint, default: 0
      add :flags, :bigint, default: 0

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "accounts_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :restrict
          ),
          null: false

      add :ledger_id,
          references(:ledgers,
            column: :id,
            name: "accounts_ledger_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :restrict
          ),
          null: false

      add :account_type_code, :bigint, null: false
    end

    create table(:account_types, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :code, :bigint, null: false
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:account_types, [:code], name: "account_types_unique_code_index")

    alter table(:accounts) do
      modify :account_type_code,
             references(:account_types,
               column: :code,
               name: "accounts_account_type_code_fkey",
               type: :bigint,
               prefix: "public"
             )
    end
  end

  def down do
    drop constraint(:accounts, "accounts_account_type_code_fkey")

    alter table(:accounts) do
      modify :account_type_code, :bigint
    end

    drop_if_exists unique_index(:account_types, [:code], name: "account_types_unique_code_index")

    drop table(:account_types)

    drop constraint(:accounts, "accounts_user_id_fkey")

    drop constraint(:accounts, "accounts_ledger_id_fkey")

    alter table(:accounts) do
      remove :account_type_code
      remove :ledger_id
      remove :user_id
      remove :updated_at
      remove :inserted_at
      remove :flags
      remove :balance
    end

    drop constraint(:transfers, "transfers_debit_account_id_fkey")

    drop constraint(:transfers, "transfers_credit_account_id_fkey")

    drop constraint(:transfers, "transfers_transfer_type_code_fkey")

    alter table(:transfers) do
      modify :transfer_type_code, :bigint
      modify :credit_account_id, :uuid
      modify :debit_account_id, :uuid
    end

    drop table(:accounts)

    drop constraint(:ledgers, "ledgers_ledger_type_code_fkey")

    alter table(:ledgers) do
      modify :ledger_type_code, :bigint
    end

    drop_if_exists unique_index(:ledger_types, [:code], name: "ledger_types_unique_code_index")

    drop table(:ledger_types)

    drop table(:ledgers)

    drop_if_exists unique_index(:transfer_types, [:code],
                     name: "transfer_types_unique_code_index"
                   )

    drop table(:transfer_types)

    drop table(:transfers)

    alter table(:users) do
      remove :role
    end
  end
end
